// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode instruction
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);
    And(a=isC, b=instruction[12], out=a);
    And(a=isC, b=instruction[11], out=zx);
    And(a=isC, b=instruction[10], out=nx);
    And(a=isC, b=instruction[9], out=zy);
    And(a=isC, b=instruction[8], out=ny);
    And(a=isC, b=instruction[7], out=f);
    And(a=isC, b=instruction[6], out=no);
    And(a=isC, b=instruction[5], out=dstA);
    And(a=isC, b=instruction[4], out=dstD);
    And(a=isC, b=instruction[3], out=writeM);
    And(a=isC, b=instruction[2], out=jmpLt);
    And(a=isC, b=instruction[1], out=jmpEq);
    And(a=isC, b=instruction[0], out=jmpGt);

    Mux16(a=instruction, b=outALU, sel=dstA, out=inA);

    Or(a=isA, b=dstA, out=ldA);
    ARegister(in=inA, load=ldA, out=outA, out[0..14]=addressM);

    Mux16(a=outA, b=inM, sel=a, out=muxAM);

    DRegister(in=outALU, load=dstD, out=outD);

    ALU(x=outD, y=muxAM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=outALU, zr=zr, ng=ng);

    // Determinate of whether a jump can be made
    And(a=jmpLt, b=ng, out=isLt);
    And(a=jmpEq, b=zr, out=isEq);
    Or(a=zr, b=ng, out=orZrNg);
    Not(in=orZrNg, out=pz);  // When both zr and ng are false, it is positive (pz).
    And(a=jmpGt, b=pz, out=isGt);
    Or(a=isLt, b=isEq, out=isLe);
    Or(a=isLe, b=isGt, out=jmp);

    PC(in=outA, inc=true, load=jmp, reset=reset, out[0..14]=pc);
}
